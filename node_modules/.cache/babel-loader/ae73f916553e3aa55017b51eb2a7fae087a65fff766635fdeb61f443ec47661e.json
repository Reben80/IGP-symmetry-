{"ast":null,"code":"var _jsxFileName = \"/Users/Rebin/new symmetry /my-app/src/components/SquareSymmetry.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { drawSquare, drawSymmetryLine } from '../utils/drawingUtils';\nimport { rotateSquare, reflectSquare } from '../utils/transformUtils';\nimport SymmetryButton from './SymmetryButton';\nimport '../styles/SquareSymmetry.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_SIZE = 400;\nconst SQUARE_SIZE = 200;\nconst SquareSymmetry = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [ctx, setCtx] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const context = canvasRef.current.getContext('2d');\n      setCtx(context);\n    }\n  }, []);\n  useEffect(() => {\n    if (ctx) {\n      drawSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE);\n    }\n  }, [ctx]);\n  const handleSymmetryOperation = operation => {\n    if (!ctx) return;\n    ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    drawSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE);\n    switch (operation) {\n      case 'rotate90':\n      case 'rotate180':\n      case 'rotate270':\n        rotateSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, parseInt(operation.slice(6)));\n        break;\n      case 'reflectVertical':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'vertical');\n        drawSymmetryLine(ctx, CANVAS_SIZE / 2, 0, CANVAS_SIZE / 2, CANVAS_SIZE);\n        break;\n      case 'reflectHorizontal':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'horizontal');\n        drawSymmetryLine(ctx, 0, CANVAS_SIZE / 2, CANVAS_SIZE, CANVAS_SIZE / 2);\n        break;\n      case 'reflectDiagonal1':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal1');\n        drawSymmetryLine(ctx, 0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        break;\n      case 'reflectDiagonal2':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal2');\n        drawSymmetryLine(ctx, CANVAS_SIZE, 0, 0, CANVAS_SIZE);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square-symmetry\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_SIZE,\n      height: CANVAS_SIZE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate90'),\n        label: \"Rotate 90\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate180'),\n        label: \"Rotate 180\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate270'),\n        label: \"Rotate 270\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectVertical'),\n        label: \"Vertical Reflection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectHorizontal'),\n        label: \"Horizontal Reflection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectDiagonal1'),\n        label: \"Diagonal Reflection 1 (45\\xB0)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectDiagonal2'),\n        label: \"Diagonal Reflection 2 (-45\\xB0)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SquareSymmetry, \"B7P/88+wLKaKs8yUCwOt0d/Ar0E=\");\n_c = SquareSymmetry;\nexport default SquareSymmetry;\nvar _c;\n$RefreshReg$(_c, \"SquareSymmetry\");","map":{"version":3,"names":["React","useRef","useEffect","useState","drawSquare","drawSymmetryLine","rotateSquare","reflectSquare","SymmetryButton","jsxDEV","_jsxDEV","CANVAS_SIZE","SQUARE_SIZE","SquareSymmetry","_s","canvasRef","ctx","setCtx","current","context","getContext","handleSymmetryOperation","operation","clearRect","parseInt","slice","className","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","label","_c","$RefreshReg$"],"sources":["/Users/Rebin/new symmetry /my-app/src/components/SquareSymmetry.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { drawSquare, drawLighterSquare, drawSymmetryLine } from '../utils/drawingUtils';\nimport { rotateSquare, reflectSquare } from '../utils/transformUtils';\nimport SymmetryButton from './SymmetryButton';\nimport '../styles/SquareSymmetry.css';\n\nconst CANVAS_SIZE = 400;\nconst SQUARE_SIZE = 200;\n\ntype SymmetryOperation = 'rotate90' | 'rotate180' | 'rotate270' | 'reflectVertical' | 'reflectHorizontal' | 'reflectDiagonal1' | 'reflectDiagonal2';\n\nconst SquareSymmetry: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const context = canvasRef.current.getContext('2d');\n      setCtx(context);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (ctx) {\n      drawSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE);\n    }\n  }, [ctx]);\n\n  const handleSymmetryOperation = (operation: SymmetryOperation) => {\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    drawSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE);\n\n    switch (operation) {\n      case 'rotate90':\n      case 'rotate180':\n      case 'rotate270':\n        rotateSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, parseInt(operation.slice(6)));\n        break;\n      case 'reflectVertical':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'vertical');\n        drawSymmetryLine(ctx, CANVAS_SIZE / 2, 0, CANVAS_SIZE / 2, CANVAS_SIZE);\n        break;\n      case 'reflectHorizontal':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'horizontal');\n        drawSymmetryLine(ctx, 0, CANVAS_SIZE / 2, CANVAS_SIZE, CANVAS_SIZE / 2);\n        break;\n      case 'reflectDiagonal1':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal1');\n        drawSymmetryLine(ctx, 0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        break;\n      case 'reflectDiagonal2':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal2');\n        drawSymmetryLine(ctx, CANVAS_SIZE, 0, 0, CANVAS_SIZE);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"square-symmetry\">\n      <canvas ref={canvasRef} width={CANVAS_SIZE} height={CANVAS_SIZE} />\n      <div className=\"button-container\">\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate90')} label=\"Rotate 90°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate180')} label=\"Rotate 180°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate270')} label=\"Rotate 270°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectVertical')} label=\"Vertical Reflection\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectHorizontal')} label=\"Horizontal Reflection\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectDiagonal1')} label=\"Diagonal Reflection 1 (45°)\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectDiagonal2')} label=\"Diagonal Reflection 2 (-45°)\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SquareSymmetry;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}