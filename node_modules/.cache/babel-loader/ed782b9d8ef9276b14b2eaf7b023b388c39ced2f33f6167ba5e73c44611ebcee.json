{"ast":null,"code":"var _jsxFileName = \"/Users/Rebin/new symmetry /my-app/src/components/SquareSymmetry.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { rotateDiagonals, reflectSquare } from '../utils/transformUtils';\nimport SymmetryButton from './SymmetryButton';\nimport '../styles/SquareSymmetry.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_SIZE = 400; // Increase this value to make the canvas bigger\nconst SQUARE_SIZE = 100; // You can adjust this as needed\n\nconst SquareSymmetry = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = CANVAS_SIZE;\n    canvas.height = CANVAS_SIZE;\n\n    // Draw initial square with diagonals\n    const squareX = (CANVAS_SIZE - SQUARE_SIZE) / 2;\n    const squareY = (CANVAS_SIZE - SQUARE_SIZE) / 2;\n    ctx.fillRect(squareX, squareY, SQUARE_SIZE, SQUARE_SIZE);\n    rotateDiagonals(ctx, SQUARE_SIZE, 0);\n  }, []);\n  const handleSymmetryOperation = operation => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    switch (operation) {\n      case 'rotate90':\n      case 'rotate180':\n      case 'rotate270':\n        rotateDiagonals(ctx, SQUARE_SIZE, parseInt(operation.slice(6)));\n        break;\n      case 'reflectVertical':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'vertical');\n        break;\n      case 'reflectHorizontal':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'horizontal');\n        break;\n      case 'reflectDiagonal1':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal1');\n        break;\n      case 'reflectDiagonal2':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal2');\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square-symmetry\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_SIZE,\n      height: CANVAS_SIZE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate90'),\n        label: \"Rotate 90\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate180'),\n        label: \"Rotate 180\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('rotate270'),\n        label: \"Rotate 270\\xB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectVertical'),\n        label: \"Vertical Reflection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectHorizontal'),\n        label: \"Horizontal Reflection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectDiagonal1'),\n        label: \"Diagonal Reflection 1 (45\\xB0)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SymmetryButton, {\n        onClick: () => handleSymmetryOperation('reflectDiagonal2'),\n        label: \"Diagonal Reflection 2 (-45\\xB0)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(SquareSymmetry, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SquareSymmetry;\nexport default SquareSymmetry;\nvar _c;\n$RefreshReg$(_c, \"SquareSymmetry\");","map":{"version":3,"names":["React","useRef","useEffect","rotateDiagonals","reflectSquare","SymmetryButton","jsxDEV","_jsxDEV","CANVAS_SIZE","SQUARE_SIZE","SquareSymmetry","_s","canvasRef","canvas","current","ctx","getContext","width","height","squareX","squareY","fillRect","handleSymmetryOperation","operation","clearRect","parseInt","slice","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","label","_c","$RefreshReg$"],"sources":["/Users/Rebin/new symmetry /my-app/src/components/SquareSymmetry.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { rotateDiagonals, reflectSquare } from '../utils/transformUtils';\nimport SymmetryButton from './SymmetryButton';\nimport '../styles/SquareSymmetry.css';\n\nconst CANVAS_SIZE = 400; // Increase this value to make the canvas bigger\nconst SQUARE_SIZE = 100; // You can adjust this as needed\n\ntype SymmetryOperation = 'rotate90' | 'rotate180' | 'rotate270' | 'reflectVertical' | 'reflectHorizontal' | 'reflectDiagonal1' | 'reflectDiagonal2';\n\nconst SquareSymmetry: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = CANVAS_SIZE;\n    canvas.height = CANVAS_SIZE;\n\n    // Draw initial square with diagonals\n    const squareX = (CANVAS_SIZE - SQUARE_SIZE) / 2;\n    const squareY = (CANVAS_SIZE - SQUARE_SIZE) / 2;\n    ctx.fillRect(squareX, squareY, SQUARE_SIZE, SQUARE_SIZE);\n    rotateDiagonals(ctx, SQUARE_SIZE, 0);\n  }, []);\n\n  const handleSymmetryOperation = (operation: SymmetryOperation) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n\n    switch (operation) {\n      case 'rotate90':\n      case 'rotate180':\n      case 'rotate270':\n        rotateDiagonals(ctx, SQUARE_SIZE, parseInt(operation.slice(6)));\n        break;\n      case 'reflectVertical':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'vertical');\n        break;\n      case 'reflectHorizontal':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'horizontal');\n        break;\n      case 'reflectDiagonal1':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal1');\n        break;\n      case 'reflectDiagonal2':\n        reflectSquare(ctx, CANVAS_SIZE / 2, CANVAS_SIZE / 2, SQUARE_SIZE, 'diagonal2');\n        break;\n    }\n  };\n\n  return (\n    <div className=\"square-symmetry\">\n      <canvas ref={canvasRef} width={CANVAS_SIZE} height={CANVAS_SIZE} />\n      <div className=\"button-container\">\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate90')} label=\"Rotate 90°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate180')} label=\"Rotate 180°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('rotate270')} label=\"Rotate 270°\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectVertical')} label=\"Vertical Reflection\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectHorizontal')} label=\"Horizontal Reflection\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectDiagonal1')} label=\"Diagonal Reflection 1 (45°)\" />\n        <SymmetryButton onClick={() => handleSymmetryOperation('reflectDiagonal2')} label=\"Diagonal Reflection 2 (-45°)\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SquareSymmetry;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}