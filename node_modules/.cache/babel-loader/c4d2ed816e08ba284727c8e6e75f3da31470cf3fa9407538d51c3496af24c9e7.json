{"ast":null,"code":"import { drawLighterSquare } from './drawingUtils';\nexport function rotateSquare(ctx, size, angle, x, y) {\n  const frames = 60;\n  let currentFrame = 0;\n  const canvasWidth = ctx.canvas.width;\n  const canvasHeight = ctx.canvas.height;\n  const squareCenterX = x !== undefined ? x + size / 2 : canvasWidth / 2;\n  const squareCenterY = y !== undefined ? y + size / 2 : canvasHeight / 2;\n  function animate() {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    // Draw the center dot\n    ctx.save();\n    ctx.fillStyle = 'red';\n    ctx.beginPath();\n    ctx.arc(squareCenterX, squareCenterY, 2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n\n    // Draw the rotating square\n    ctx.save();\n    ctx.translate(squareCenterX, squareCenterY);\n    ctx.rotate(currentFrame / frames * (angle * Math.PI / 180));\n    ctx.translate(-size / 2, -size / 2);\n    drawLighterSquare(ctx, 0, 0, size);\n    ctx.restore();\n    currentFrame++;\n    if (currentFrame <= frames) {\n      requestAnimationFrame(animate);\n    }\n  }\n  animate();\n}\nexport function reflectSquare(ctx, x, y, size, axis) {\n  ctx.save();\n  switch (axis) {\n    case 'vertical':\n      ctx.transform(-1, 0, 0, 1, 2 * x, 0);\n      break;\n    case 'horizontal':\n      ctx.transform(1, 0, 0, -1, 0, 2 * y);\n      break;\n    case 'diagonal1':\n      ctx.transform(0, 1, 1, 0, 0, 0);\n      break;\n    case 'diagonal2':\n      ctx.transform(0, -1, -1, 0, 2 * x, 2 * y);\n      break;\n  }\n  drawLighterSquare(ctx, x, y, size);\n  ctx.restore();\n}","map":{"version":3,"names":["drawLighterSquare","rotateSquare","ctx","size","angle","x","y","frames","currentFrame","canvasWidth","canvas","width","canvasHeight","height","squareCenterX","undefined","squareCenterY","animate","clearRect","save","fillStyle","beginPath","arc","Math","PI","fill","restore","translate","rotate","requestAnimationFrame","reflectSquare","axis","transform"],"sources":["/Users/Rebin/new symmetry /my-app/src/utils/transformUtils.ts"],"sourcesContent":["import { drawLighterSquare } from './drawingUtils';\n\nexport function rotateSquare(\n  ctx: CanvasRenderingContext2D, \n  size: number, \n  angle: number,\n  x?: number,\n  y?: number\n) {\n  const frames = 60;\n  let currentFrame = 0;\n\n  const canvasWidth = ctx.canvas.width;\n  const canvasHeight = ctx.canvas.height;\n  const squareCenterX = x !== undefined ? x + size / 2 : canvasWidth / 2;\n  const squareCenterY = y !== undefined ? y + size / 2 : canvasHeight / 2;\n\n  function animate() {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    // Draw the center dot\n    ctx.save();\n    ctx.fillStyle = 'red';\n    ctx.beginPath();\n    ctx.arc(squareCenterX, squareCenterY, 2, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.restore();\n\n    // Draw the rotating square\n    ctx.save();\n    ctx.translate(squareCenterX, squareCenterY);\n    ctx.rotate((currentFrame / frames) * (angle * Math.PI / 180));\n    ctx.translate(-size / 2, -size / 2);\n    drawLighterSquare(ctx, 0, 0, size);\n    ctx.restore();\n\n    currentFrame++;\n\n    if (currentFrame <= frames) {\n      requestAnimationFrame(animate);\n    }\n  }\n\n  animate();\n}\n\nexport function reflectSquare(ctx: CanvasRenderingContext2D, x: number, y: number, size: number, axis: 'vertical' | 'horizontal' | 'diagonal1' | 'diagonal2') {\n  ctx.save();\n\n  switch (axis) {\n    case 'vertical':\n      ctx.transform(-1, 0, 0, 1, 2 * x, 0);\n      break;\n    case 'horizontal':\n      ctx.transform(1, 0, 0, -1, 0, 2 * y);\n      break;\n    case 'diagonal1':\n      ctx.transform(0, 1, 1, 0, 0, 0);\n      break;\n    case 'diagonal2':\n      ctx.transform(0, -1, -1, 0, 2 * x, 2 * y);\n      break;\n  }\n\n  drawLighterSquare(ctx, x, y, size);\n  ctx.restore();\n}"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAElD,OAAO,SAASC,YAAYA,CAC1BC,GAA6B,EAC7BC,IAAY,EACZC,KAAa,EACbC,CAAU,EACVC,CAAU,EACV;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,YAAY,GAAG,CAAC;EAEpB,MAAMC,WAAW,GAAGP,GAAG,CAACQ,MAAM,CAACC,KAAK;EACpC,MAAMC,YAAY,GAAGV,GAAG,CAACQ,MAAM,CAACG,MAAM;EACtC,MAAMC,aAAa,GAAGT,CAAC,KAAKU,SAAS,GAAGV,CAAC,GAAGF,IAAI,GAAG,CAAC,GAAGM,WAAW,GAAG,CAAC;EACtE,MAAMO,aAAa,GAAGV,CAAC,KAAKS,SAAS,GAAGT,CAAC,GAAGH,IAAI,GAAG,CAAC,GAAGS,YAAY,GAAG,CAAC;EAEvE,SAASK,OAAOA,CAAA,EAAG;IACjBf,GAAG,CAACgB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAET,WAAW,EAAEG,YAAY,CAAC;;IAE9C;IACAV,GAAG,CAACiB,IAAI,CAAC,CAAC;IACVjB,GAAG,CAACkB,SAAS,GAAG,KAAK;IACrBlB,GAAG,CAACmB,SAAS,CAAC,CAAC;IACfnB,GAAG,CAACoB,GAAG,CAACR,aAAa,EAAEE,aAAa,EAAE,CAAC,EAAE,CAAC,EAAEO,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;IACxDtB,GAAG,CAACuB,IAAI,CAAC,CAAC;IACVvB,GAAG,CAACwB,OAAO,CAAC,CAAC;;IAEb;IACAxB,GAAG,CAACiB,IAAI,CAAC,CAAC;IACVjB,GAAG,CAACyB,SAAS,CAACb,aAAa,EAAEE,aAAa,CAAC;IAC3Cd,GAAG,CAAC0B,MAAM,CAAEpB,YAAY,GAAGD,MAAM,IAAKH,KAAK,GAAGmB,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,CAAC;IAC7DtB,GAAG,CAACyB,SAAS,CAAC,CAACxB,IAAI,GAAG,CAAC,EAAE,CAACA,IAAI,GAAG,CAAC,CAAC;IACnCH,iBAAiB,CAACE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEC,IAAI,CAAC;IAClCD,GAAG,CAACwB,OAAO,CAAC,CAAC;IAEblB,YAAY,EAAE;IAEd,IAAIA,YAAY,IAAID,MAAM,EAAE;MAC1BsB,qBAAqB,CAACZ,OAAO,CAAC;IAChC;EACF;EAEAA,OAAO,CAAC,CAAC;AACX;AAEA,OAAO,SAASa,aAAaA,CAAC5B,GAA6B,EAAEG,CAAS,EAAEC,CAAS,EAAEH,IAAY,EAAE4B,IAA2D,EAAE;EAC5J7B,GAAG,CAACiB,IAAI,CAAC,CAAC;EAEV,QAAQY,IAAI;IACV,KAAK,UAAU;MACb7B,GAAG,CAAC8B,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG3B,CAAC,EAAE,CAAC,CAAC;MACpC;IACF,KAAK,YAAY;MACfH,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG1B,CAAC,CAAC;MACpC;IACF,KAAK,WAAW;MACdJ,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC/B;IACF,KAAK,WAAW;MACd9B,GAAG,CAAC8B,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG3B,CAAC,EAAE,CAAC,GAAGC,CAAC,CAAC;MACzC;EACJ;EAEAN,iBAAiB,CAACE,GAAG,EAAEG,CAAC,EAAEC,CAAC,EAAEH,IAAI,CAAC;EAClCD,GAAG,CAACwB,OAAO,CAAC,CAAC;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}